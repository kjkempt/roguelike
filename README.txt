For assignment 1.10, I implemented ranged combat that allows the player to select a cell within a 5x5 radius of the player and attack it with a ranged weapon or spell. The spells create an area of effect the size of 3x3 cells that damage any monsters within the radius of the spell. This radius is fixed for all spell types. Spells are cast with BOOKS, which now can be equipped in the RANGED equipment slot. Damage is implemented the same. Players cannot shoot or cast spells through walls but AOE of a spell can transcend walls since it is magic. Ranged combat is accessed when a ranged weapon or spell book equipped and the user inputs 'r'. I also implemented food into the game to be used. It is used for health recovery/gain. Health is based on the damage output of the rolled dice from the object. A player does not have a set health cap so health can accumulate because there is only a set amount of food per floor. A food menu can be accessed with 'a' in the select screen. Lastly, I implemented a current health output button that outputs the players current health onto the window. This is accessed by selecting 'v'. 
For ranged combat, I created a new function in combat.cpp called ranged_attack(). This function uses the cursor to show where the player is at. It keep track of the cursor based on the movements in a do-while loop that takes user input from the window. The cursors are incremented/decremented in if-else statements that check to make sure the cursor does not go out of bounds and also that the cursor does not cross into space filled with rock. Once the player selects the cell, there is a if-else statement to check if the weapon is ranged or spellbook. For ranged, the single spot coordinate is cycled through each monster's current whereabouts to see if there is a match and then display the hit damage/monster HP if applicable. For the spell book, the monsters' coordinates are cycled through again but this time it is done in a nested for loop that checks the 3x3 radius around the center of contact. Each contact with a monster decreases its HP by that amount. For food recovery, the function recovery() opens a menu (window) of the inventory and prompts for a selection like is assignment 1-09. After input, the selection is checked to make sure it's food and then the damage value of the food is rolled and added to the player's life through a class function called recoveryItem(). recoveryItem() just rolls the damage and adds that value onto the current life. For checking the players health, it is just a mwprintw that outputs the players current health through a player class function.